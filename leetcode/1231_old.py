from typing import List
import math

class Solution:
    def maximizeSweetness(self, sweetness: List[int], K: int) -> int:
        N = len(sweetness)
        postfix_sum = [s for s in sweetness]
        for i in range(N-2,-1,-1):
            postfix_sum[i] += postfix_sum[i+1]
        
        dp = {}

        def recsolve(i, k):
            if (i,k) in dp:
                return dp[(i,k)]

            iarr = sweetness
            
            if k == 1:
                dp[(i,k)] = sum(iarr[i:])
                return dp[(i,k)]
            if N-i == k:
                dp[(i,k)] = min(iarr[i:])
                return dp[(i,k)]
            
            target_avg = postfix_sum[i] // (k)
            #target_avg = global_avg
            cur_val = iarr[i]
            j = i+1
            while (N-j > k-1) and (cur_val + iarr[j] <= target_avg):
                cur_val += iarr[j]
                j += 1
                
            #print(f"N:{N} i:{i} j:{j} k:{k} cur_val:{cur_val} target_avg:{target_avg}")
            
            if cur_val >= target_avg:
                dp[(i,k)] = min(cur_val, recsolve(j, k-1))
            else:
                if N-j == k-1:
                    dp[(i,k)] = min(cur_val, recsolve(j, k-1))
                else:
                    cut_here = min(cur_val, recsolve(j, k-1))
                    cut_next = min(cur_val+iarr[j], recsolve(j+1, k-1))
                    dp[(i,k)] = max(cut_here, cut_next)

            return dp[(i,k)]
                
        return recsolve(0, K+1)
            
sweetness = [9,1,9,1,9,1,9,9,1]
K = 5

# sweetness = [5,6,7,8,9,1,2,3,4]
# K = 8

# sweetness = [1,2,2,1,2,2,1,2,2]
# K = 2

# sweetness = [93138,60229,11179,91723,85722,58195,95146,85049,33816,96902,90688,49428,12942,92258,79248,34754,84744,36020,92601,27208,28080,47608,56185,30986,99000,75061,86087,81803,49219,97866,40688,45222,13997,38184,93314,39449,11014,45643,34874,12590,92531,41891,4581,19342,4254,65419,74418,37309,72577,29710,70849,48726,4065,8711,65258,66877,61625,2362,78453,44042,15437,69222,53745,18492,34470,95699,14178,24256,86504,63646,34805,84171,30979,784,35720,4666,86966,82187,44100,75253,60649,96874,55457,76446,53927,45725,11740,12169,70093,89884,98535,44881,94654,70810,56558,43993,26318,86350,42786,26313]
# K = 81

sweetness = [75266,80023,11370,11705,25108,78492,61442,31866,12714,60174,33694,1510,51058,56410,28057,72639,4615,67200,26783,85773,25832,37130,76950,74456,31089,3273,54415,70441,1984,33376,32124,55990,20209,83320,68435,51587,15761,89027,43476,46924,35378,45489,23698,75213,89073,682,53895,61232,46526,12831,93814,51213,42888,12550,53416,55525,6699,56028,94730,40520,73734,2724,28312,12341,89486,18802,72109,44501,2833,83116,99705,48257,91491,31023,58001,29747,31,99644,31099,25215,49855,17137,13671,45223,17175,45499,29193,43787,13503,37212,21061,76317,66833,81508,68138,92766,73625,72322,49428,97726,7533,98192,93823,82278,95181,60555,23872,72085,15517,57569,19303,21854,94271,61959,44553,14115,77539,16274,7931,7815,50613,91740,43940,24938,78644,29524,343,30219,33546,64533,22848,3988,98308,38987,88089,63057,95846,77837,72356,23108,8610,92006,29323,62480,68615,56878,37126,97781,86582,9202,56887,18184,97197,30660,87600,34682,66737,77199,42263,47606,52568,37021,51462,4596,56917,76847,85896,35311,8771,7644,41744,97090,88573,91387,19196,74138,11974,68542,28344,10457,70920,14325,25774,40346,40827,85242,72934,57414,93104,65374,24176,25316,79446,47213,24766,39716,56256,86826,73598,14525,1915,14686,16491,84244,97257,46834,23939,22277,83913,53529,96095,47751,77653,77218,10477,11303,30942,38820,37093,10589,69494,31102,50557,40073,92758,23460,68567,26130,50174,81762,48602,4866,38555,60313,18098,28120,77358,70441,68007,45336,8896,78547,12324,41978,8270,60285,72177,97715,9878,71484,54627,110,86035,87078,58088,90190,76448,91148,84047,95576,19238,23616,86735,84501,82245,29868,66556,14917,43895,27440,13878,88961,19925,4284,5213,12605,99540,66781,48023,65030,20198,59762,97236,72072,4315,71027,81112,18911,1507,69820,26953,17702,33908,55986,46720,63543,63645,2411,50191,73928,26745,82789,19525,33213,53722,6840,37572,34515,26457,23319,26670,47039,81953,22262,40415,19138,36446,19148,7919,49458,47681,19415,2632,17816,63049,32039,88034,96665,77453,84616,89305,83479,8983,64368,93771,33613,48091,46188,83522,20878,38891,6233,13871,58603,49655,76365,51553,3516,47374,41864,47139,58397,94557,46674,72864,28006,15504,17048,20690,12117,18448,28079,33262,8437,19141,52386,76794,40973,10136,2670,11951,1408,13596,19412,80798,66231,70353,30804,60852,44824,70040,3443,26569,13852,38222,83714,57498,15283,65317,9976,16847,66386,39704,32093,11427,89620,75281,40376,3675,96464,58183,86050,97854,56983,7290,60799,80262,47486,22091,84161,52446,47963,82851,50959,74641,4593,35226,29672,17499,24920,24154,73442,71375,52159,39869,76280,56506,64565,44946,67573,50664,92563,34745,42572,45614,29134,40688,31400,88189,46116,99437,25372,1579,36879,76834,3507,75408,15200,91463,37957,48235,25953,88963,29662,5826,90162,13086,3865,77023,37416,68152,54388,23491,18817,12490,64950,90209,67128,8664,39451,64809,5939,74395,59983,25605,25222,99056,27820,93847,27738,60210,46047,82909,59635,89802,58661,91027,88893,98023,5436,53076,6262,36775,73820,919,58967,81136,86677,11289,30458,39999,3850,97149,96068,14838,79203,44062,47600,93078,14731,90545,72891,81637,84534,10640,2758,20576,56201,88615,49212,81510,62046,85807,49688,67949,29,99729,32826,99013,19474,98460,13494,91715,41940,50252,98922,21019,85202,89515,27056,88586,68537,49561,72603,885,58951,92020,95282,59743,64606,97870,27348,99356,86275,92385,28535,74806,54333,68911,3756,8184,18304,35812,77650,74760,25471,28745,60772,26838,17808,98404,78743,91045,40186,72018,66832,33997,39104,51194,57265,73315,19127,71245,80588,76138,85670,28866,21631,43775,79646,70763,83390,67002,36188,57880,14712,44700,90338,21389,86943,90931,42794,67981,67604,29083,88722,20461,89472,38461,25152,22360,44702,98123,85405,68810,49479,73199,13843,7068,6403,35612,35806,98647,84076,22706,57481,69940,56955,49108,5663,77694,19036,54759,18267,37329,16701,9785,77951,51642,2809,11917,95221,8573,18709,72066,15096,74803,92946,13371,88911,96643,25740,37157,8031,61406,12585,55667,8160,80766,25153,47408,55408,24050,10564,2719,23244,52860,36122,46278,52856,77258,15682,48579,31273,81872,92676,76881,53705,61217,6478,40292,4767,12689,37008,45402,70080,16237,43225,13616,31146,47500,46658,16405,36389,42129,53915,18849,98256,20049,56742,33886,85087,88532,90189,55007,76039,50352,49006,3335,37132,25691,91837,57213,28646,92144,55589,66905,149,46479,65171,77238,98257,91331,86063,23155,14353,63027,24229,72842,40394,57406,48832,29571,14487,96898,58290,65213,34613,13806,49164,15404,71316,12802,5263,74052,95057,38261,98037,11144,35195,40342,27313,97383,43378,66478,6662,60555,10658,45097,33591,44225,24757,21950,40919,38353,29653,6328,32257,9797,54309,79367,18755,79927,81911,20850,24127,93127,23926,51391,25400,56793,43742,44978,2956,50409,99327,21745,40332,35188,42548,77330,6198,12304,36996,64752,60832,60673,63832,47062,49159,50888,329,50008,19409,69401,37406,30877,70619,34127,61116,65028,27954,32502,55807,8032,35188,12220,2008,19315,97537,67786,57504,76938,82577,97360,57985,38162,17488,3688,95144,75321,66,3660,90170,72179,51422,71881,26698,79510,11198,60158,39529,37195,9626,57250,8783,92178,75817,42927,52683,70836,58357,20081,73577,5213,21579,62496,79727,84945,86710,42279,46715,32919,65287,38258,54067,42438,53096,61981,62073,26140,84221,59352,23774,89871,54464,21945,98321,99686,71786,16194,35653,10221,24986,56016,68062,58633,33320,49140,45802,93693,43989,55317,38804,19381,33141,17673,26328,51404,56214,71859,99505,58532,17584,48215,79249,69212,92112,85318,18947,38355,67793,42685,87453,87334,73320,56074,19759,42203,44994,7951,47004,40378,42646,64339,13919,15399,35902,82061,30408,27605,57154,75624,39297,36972,93068,91027,93277,8683,8500,1472,47652,90552,59085,91664,75216,62188,11542,35325,47021,6598,62100,48420,69243,63537,53184,22315,42800,56785,46666,66441,43238,76531,22848,63353,55652,90393,22927,3740,65257,92092,7267,80307,76489,87542,59287,20897,30798,42632,98509,31167,44816,71275,74472,22388,30720,64811,9016,50826,92743,20826,91160,66879,8371,56114,40218,48047,62891,73340,77272]
K = 531

sol = Solution()
print(sol.maximizeSweetness(sweetness, K))