import copy
from typing import List

class Solution:
    def mostSimilar(self, n: int, roads: List[List[int]], names: List[str], targetPath: List[str]) -> List[int]:
        P = len(targetPath)

        # build graph from roads
        adjascent = {i:set([]) for i in range(n)}
        for a,b in roads:
            adjascent[a].add(b)
            adjascent[b].add(a)

        same_name_nodes = {}
        for i,nm in enumerate(names):
            if nm not in same_name_nodes:
                same_name_nodes[nm] = []
            same_name_nodes[nm].append(i)

        # define dfs function
        cache = {}
        def dfs(cur_node, target_node, cur_depth, target_depth):
            depthdiff = target_depth - cur_depth

            if (cur_node, target_node, depthdiff) in cache:
                return cache[(cur_node, target_node, depthdiff)]

            if depthdiff == 0:
                if cur_node == target_node:
                    return []
                else:
                    return None

            for nxt in adjascent[cur_node]:
                retval = dfs(nxt, target_node, cur_depth+1, target_depth)
                if retval != None:
                    cache[(cur_node, target_node, depthdiff)] = [cur_node] + retval
                    return cache[(cur_node, target_node, depthdiff)]

            cache[(cur_node, target_node, depthdiff)] = None

        def expand_right(start_node, num_append):
            res = []
            cur = start_node
            for i in range(num_append):
                nxt = next(iter(adjascent[cur]))
                res.append(nxt)
                cur = nxt
            return res

        def expand_left(start_node_idx, num_append):
            return expand_right(start_node_idx, num_append)[::-1]

        # setup dp
        dp = [[] for i in range(P)]

        # set base case
        hasright = False
        for right in range(P-1,-1,-1):
            rname = targetPath[right]
            if rname in same_name_nodes:
                for node in same_name_nodes[rname]:
                    expnd = expand_right(node, P-1-right)
                    dp[right].append(([node]+expnd, len(expnd)))
                hasright = True
                break

        if not hasright and right == 0 and len(targetPath) > 1:
            return [0]+expand_right(0, len(targetPath)-1)

        for dpi in range(right-1, -1, -1):
            srcname = targetPath[dpi]
            if srcname not in same_name_nodes:
                continue
            srcnodelist = same_name_nodes[srcname]

            for src in srcnodelist:
                src_min_seq = None
                src_min_cost = 0xFFFF

                for dsti in range(dpi+1, P):
                    dstname = targetPath[dsti]
                    if dstname not in same_name_nodes:
                        continue

                    target_depth = dsti-dpi
                    default_cost = dsti-dpi-1

                    for prvseq, prvcost in dp[dsti]:
                        if prvcost + default_cost >= src_min_cost:
                            continue
                        
                        target_node = prvseq[0]
                        dfs_result = dfs(src, target_node, 0, target_depth)
                        if dfs_result != None:
                            src_min_seq = dfs_result + prvseq
                            src_min_cost = default_cost + prvcost

                if src_min_seq != None:
                    dp[dpi].append((src_min_seq, src_min_cost))
                else:
                    steps_to_end = P-1-dpi
                    dp[dpi].append(([src]+expand_right(src,steps_to_end), steps_to_end))

        # for l in dp:
        #     print(dp)

        for left in range(P):
            if len(dp[left]) > 0:
                minseq = min(dp[left], key=lambda t:t[1])[0]
                retval = expand_left(minseq[0],left) + minseq
                # print(len(retval),P)
                return retval

        return [0]


sol = Solution()

# n = 5
# roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]]
# names = ["ATL","PEK","LAX","DXB","HND"]
# targetPath = ["ATL","DXB","HND","LAX"]

# n = 4
# roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]]
# names = ["ATL","PEK","LAX","DXB"]
# targetPath = ["ABC","DEF","GHI","JKL","MNO","PQR","STU","VWX"]

# n = 6
# roads = [[0,1],[1,2],[2,3],[3,4],[4,5]]
# names = ["ATL","PEK","LAX","ATL","DXB","HND"]
# targetPath = ["ATL","DXB","HND","DXB","ATL","LAX","PEK"]

# n = 2
# roads = [[0,1]]
# names = ["EVV","PLS"]
# targetPath = ["EVV","EVV","EVV","PLS","PLS","EVV","EVV","PLS","PLS","PLS","PLS","PLS","EVV","EVV","PLS"]

n = 66
roads = [[62,54],[52,43],[44,37],[27,51],[53,48],[13,54],[8,54],[13,16],[4,16],[46,49],[49,43],[3,7],[16,10],[40,61],[50,34],[56,63],[47,49],[54,63],[5,48],[20,52],[37,49],[37,61],[34,60],[47,7],[35,10],[53,50],[43,6],[58,17],[12,50],[3,27],[48,36],[45,28],[63,11],[5,3],[27,41],[65,37],[59,57],[51,20],[36,41],[61,55],[64,51],[4,56],[31,36],[62,35],[56,23],[3,8],[46,5],[57,6],[33,49],[11,15],[35,52],[2,39],[50,25],[35,34],[61,16],[5,41],[23,31],[57,2],[29,43],[5,24],[4,25],[28,0],[7,37],[41,37],[35,28],[5,20],[53,43],[63,64],[54,65],[21,10],[16,47],[8,7],[8,61],[23,19],[3,14],[50,54],[61,14],[57,62],[12,48],[63,19],[39,44],[51,30],[50,35],[59,39],[37,52],[15,8],[22,9],[65,38],[30,58],[46,53],[38,39],[19,54],[36,34],[46,51],[32,28],[22,48],[11,34],[45,57],[47,62],[46,34],[48,60],[5,34],[48,58],[5,2],[51,1],[13,6],[51,11],[59,25],[3,34],[1,38],[52,50],[18,45],[35,61],[36,55],[22,42],[17,2],[20,55],[60,1],[52,14],[48,37],[65,56],[45,36],[62,22],[62,27],[54,43],[35,43],[0,24],[62,64],[59,61],[53,6],[62,46],[56,50],[57,56],[23,35],[56,36],[23,60],[28,39],[31,37],[48,46],[24,46],[46,64],[11,30],[22,43],[52,48],[63,51],[7,12],[46,40],[61,28],[58,24],[40,54],[26,63],[11,53],[15,54],[46,61],[10,20],[64,49],[29,21],[64,55],[63,60],[32,35],[53,4],[34,44],[9,3],[49,13],[34,48],[30,59],[47,22],[11,27],[37,27],[5,58],[12,59],[39,24],[47,42],[28,38],[36,11],[42,18],[25,23],[48,65],[64,41],[47,53],[65,43],[11,45],[12,65],[35,11],[47,63],[42,16],[26,10],[55,15],[44,55],[45,49],[23,1],[63,46],[36,64],[3,23],[43,50],[47,4],[31,38],[40,56],[21,46],[39,53],[55,63],[43,28],[46,43],[31,30],[56,47],[15,21],[9,46],[45,22],[35,57],[4,44],[42,53],[43,16],[61,18],[53,5],[12,45],[48,25],[36,16],[62,50],[53,45],[9,12],[54,56],[63,62],[38,17],[29,8],[46,36],[37,57],[26,53],[29,20],[55,16],[38,30],[24,1],[18,35],[47,41],[30,53],[29,64],[51,31],[7,17],[16,25],[47,25],[46,65],[55,52],[14,30],[50,63],[24,42],[65,40],[31,15],[9,63],[12,29],[28,50],[17,41],[64,35],[41,61],[61,50],[4,29],[45,65],[47,58],[20,34],[33,44],[19,64],[20,50],[49,50],[32,46],[28,10],[61,62],[46,37],[15,10],[4,37],[24,34],[44,28],[48,14],[24,59],[21,13],[54,58],[57,51],[25,24],[26,56],[58,62],[59,46],[12,6],[18,21],[21,24],[53,63],[42,38],[33,7],[32,14],[17,12],[2,50],[49,29],[18,9],[2,14],[57,29],[60,50],[65,31],[37,19],[44,48],[39,51],[9,4],[62,60],[17,62],[59,35],[22,16],[35,19],[63,44],[10,0],[33,21],[38,11],[39,4],[44,62],[16,20],[36,25],[17,55],[32,13],[22,13],[21,1],[58,18],[36,17],[0,23],[60,7],[50,57],[31,21],[31,50],[63,15],[58,32],[54,49],[33,59],[35,39],[42,17],[33,41],[8,37],[9,40],[8,42],[40,16],[32,22],[37,1],[59,48],[11,64],[9,48],[56,33],[39,63],[34,26],[52,25],[47,35],[36,54],[7,48],[60,41],[51,65],[45,43],[56,41],[35,2],[64,61],[31,61],[60,32],[45,52],[15,53],[55,60],[59,54],[22,29],[14,55],[1,50],[50,48],[39,46],[34,4],[45,23],[14,40],[55,48],[62,51],[44,21],[29,36],[43,40],[52,65],[57,54],[18,52],[26,38],[58,50],[41,25],[53,32],[53,27],[37,38],[2,37],[43,58],[55,56],[20,27],[17,22],[51,23],[39,8],[38,59],[13,25],[60,37],[46,44],[53,58],[59,64],[23,38],[64,40],[7,15],[6,51],[24,23],[34,31],[25,58],[56,52],[59,63],[13,2],[0,26],[12,61],[58,22],[8,45],[1,52],[39,10],[10,12],[23,54],[31,25],[37,28],[56,51],[1,11],[57,55],[61,30],[45,25],[23,9],[53,61],[44,41],[15,23],[23,41],[56,53],[60,47],[42,20],[47,57],[20,14],[60,52],[65,19],[18,4],[65,57],[52,61],[10,65],[36,7],[33,39],[53,57],[33,27],[37,0],[25,11],[56,16],[50,23],[42,35],[54,42],[8,41],[34,23],[60,59],[3,54],[36,8],[14,54],[15,33],[10,5],[42,31],[35,3],[39,58],[47,18],[2,34],[46,52],[4,0],[38,5],[0,9],[6,9],[56,45],[31,22],[13,35],[0,14],[23,28],[63,37],[38,58],[46,19],[40,4],[24,13],[18,24],[64,50],[40,37],[51,60],[53,28],[61,42],[59,56],[62,52],[12,55],[56,44],[34,58],[26,25],[53,31],[58,60],[36,27],[46,17],[44,2],[28,8],[39,61],[38,63],[58,59],[40,53],[43,55],[44,5],[22,27],[55,35],[54,64],[35,51],[29,63],[8,11],[25,56],[2,33],[30,41],[30,56],[17,40],[29,28],[35,12],[12,1],[6,59],[65,47],[58,61],[35,58],[43,60],[44,42],[24,37],[19,50],[33,11],[49,58],[15,19],[33,42],[29,65],[11,42],[38,54],[52,38],[22,4],[14,43],[45,44],[41,1],[42,45],[7,11],[37,22],[41,51],[60,36],[36,49],[64,32],[36,26],[50,5],[53,62],[53,2],[50,47],[28,41],[6,52],[6,17],[60,29],[41,59],[29,33],[27,8],[31,41],[15,36],[60,53],[31,60],[41,54],[38,46],[49,57],[60,14],[7,30],[32,3],[38,55],[10,42],[29,10],[18,53],[59,32],[25,46],[25,62],[28,30],[56,61],[0,55],[23,55],[40,20],[24,65],[63,61],[9,19],[58,37],[24,36],[11,48],[13,8],[21,55],[59,62],[47,27],[38,50],[40,60],[31,62],[64,17],[64,12],[15,6],[33,25],[55,62],[24,20],[41,12],[43,61],[39,7],[30,46],[14,25],[15,30],[32,42],[16,17],[64,56],[20,60],[54,61],[12,43],[27,46],[26,29],[44,51],[30,47],[42,58],[64,27],[2,46],[48,3],[31,12],[64,57],[33,47],[34,15],[65,61],[57,25],[62,38],[41,42],[31,49],[57,58],[64,2],[24,28],[22,21],[41,50],[13,39],[60,17],[20,56],[54,48],[9,55],[65,4],[40,33],[54,52],[2,0],[57,60],[0,39],[4,6],[64,22],[41,11],[64,58],[7,55],[27,56],[6,46],[26,18],[58,65],[12,22],[13,27],[5,25],[46,56],[31,52],[14,64],[21,14],[44,47],[56,38],[57,43],[62,36],[44,57],[50,16],[21,59],[38,27],[52,15],[39,56],[26,61],[37,55],[45,21],[58,44],[51,61],[5,28],[60,30],[35,36],[41,2],[60,65],[49,55],[31,56],[53,41],[49,61],[31,26],[53,8],[49,52],[20,23],[50,10],[41,43],[8,38],[41,39],[32,9],[2,58],[65,63],[38,19],[64,60],[11,59],[1,36],[45,1],[36,39],[18,62],[50,26],[38,53],[59,47],[62,15],[12,26],[5,35],[50,14],[32,23],[19,12],[11,29],[27,29],[33,5],[46,54],[47,40],[56,48],[31,54],[11,49],[49,65],[63,40],[11,65],[46,31],[1,29],[30,23],[4,35],[52,7],[24,30],[42,51],[3,16],[48,49],[32,61],[43,56],[65,55],[45,50],[19,40],[12,27],[6,1],[12,2],[18,46],[10,55],[47,17],[60,28],[21,23],[42,56],[9,13],[42,36],[56,8],[60,42],[54,60],[54,17],[32,33],[12,11],[52,23],[9,59],[16,39],[53,52],[60,35],[53,51],[48,45],[42,64],[21,9],[16,28],[3,22],[45,30],[51,14],[42,7],[16,58],[24,61],[28,18],[14,44],[49,27],[64,45],[3,55],[47,64],[65,35],[21,6],[24,63],[41,40],[1,32],[47,19],[54,51],[54,37],[48,41],[17,4],[26,14],[38,24],[7,32],[11,23],[23,2],[50,9],[8,24],[41,63],[44,26],[27,34],[63,22],[56,35],[51,17],[27,57],[59,53],[27,44],[12,60],[51,38],[31,16],[58,45],[58,10],[65,53],[53,44],[31,45],[44,49],[39,57],[22,49],[56,7],[16,8],[34,13],[51,55],[18,41],[38,61],[19,52],[55,27],[53,55],[3,53],[60,22],[55,45],[0,44],[62,10],[1,57],[2,54],[36,0],[1,35],[39,26],[44,64],[48,43],[50,55],[42,34],[49,18],[62,42],[33,23],[59,34],[44,60],[33,31],[47,8],[15,45],[39,37],[55,39],[58,40],[42,63],[50,39],[59,36],[32,65],[34,45],[59,50],[45,35],[63,52],[16,35],[35,46],[52,27],[13,17],[59,65],[28,9],[62,65],[11,43],[34,39],[65,64],[48,6],[35,63],[21,54],[32,11],[25,29],[61,27],[19,41],[21,20],[35,37],[30,43],[6,20],[44,54],[57,61],[7,31],[60,33],[18,33],[53,54],[48,51],[49,62],[2,24],[25,19],[45,51],[0,38],[50,46],[51,10],[58,19],[21,35],[59,49],[60,61],[41,3],[30,12],[63,58],[36,47],[59,51],[23,63],[48,20],[57,42],[57,28],[61,45],[48,47],[19,22],[52,58],[23,58],[32,48],[33,9],[4,48],[40,62],[46,42],[63,57],[51,58],[55,58],[44,16],[47,15],[59,42],[41,65],[14,15],[33,62],[12,0],[1,10],[41,49],[26,47]]
names = ["WIL","MED","BES","VER","ADK","VEL","BUQ","PIH","PIU","FIH","ONT","MKG","FYV","HRE","ELQ","MSO","ELS","LCE","FOC","JED","DCA","STN","OIT","FIL","PFO","FPR","SRQ","CUZ","GOA","CZM","MPL","GRZ","LAP","OSA","BDU","SJO","INN","YVO","GFK","RGL","TSF","TIP","APW","PNS","VIE","IAG","MSY","KPN","AGA","ASU","UUS","MES","DLH","SMF","KWL","FSD","MUN","YAM","CPO","KAL","NAN","PNE","VKO","GNB","ABR","SAN"]
targetPath = ["SMF","KTP"]

print(sol.mostSimilar(n, roads, names, targetPath))
